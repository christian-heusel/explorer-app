---
# tasks file for ansible-wifi-router
# This playbook installs and configures needed packages.

- name: Install the needed packages
  apt:
    name: ["firmware-ralink", "hostapd",  "wireless-tools", "dnsmasq", "iw"]
    state: present

- name: configure dnsmasq
  template:
    src: dnsmasq.j2
    dest: /etc/dnsmasq.conf
    owner: root
    group: root
    mode: 0644
  notify: restart networking

- name: Set used newtwork interface down
  command: "ifconfig {{ interface_in }} down"

- name: ensure that the files in interfaces.d are sourced
  lineinfile:
    dest: /etc/network/interfaces
    line: "source /etc/network/interfaces.d/*"

- name: Set /etc/network/interfaces configuration
  template:
    src: interfaces.j2
    dest: /etc/network/interfaces.d/
    owner: root
    group: root
    mode: 0644
  notify: restart networking

- name: Create hostapd.conf configuration
  template:
    src: hostapd.conf.j2
    dest: /etc/hostapd/hostapd.conf
    owner: root
    group: root
    mode: 0644
  notify: restart networking

- name: Set hostapd to use hostapd.conf configure
  lineinfile:
    dest: /etc/default/hostapd
    regexp: '^(#?DAEMON_CONF=")'
    line: 'DAEMON_CONF="/etc/hostapd/hostapd.conf"'
  notify: restart networking

- name: Set NAT
  lineinfile:
    path: /etc/sysctl.conf
    line: 'net.ipv4.ip_forward=1'
  when: allow_connection

- name: Start the translation
  command: sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
  when: allow_connection

- name: get the WIFI country
  command: "raspi-config nonint get_wifi_country"
  register: current_wifi_country
  changed_when: false

- name: set the correct WiFi country
  command: "raspi-config nonint do_wifi_country {{ wifi_country }}"
  when: not current_wifi_country.stdout ==  wifi_country


- name: set the correct country code in /etc/default/crda
  lineinfile:
    path: /etc/default/crda
    regexp: '^REGDOMAIN='
    line: "REGDOMAIN={{ wifi_country }}"
  notify: restart networking

- name: Set used network interface up
  command: "ifconfig {{ interface_in }} up"

# TODO: replace this with ansible.builtin.iptables
- name: Iptable settings
  command: iptables {{ item }}
  with_items:
    - "-t nat -A POSTROUTING -o {{ interface_out }} -j MASQUERADE"
    - "-A FORWARD -i {{ interface_out }} -o {{ interface_in }} -m state --state RELATED,ESTABLISHED -j ACCEPT"
    - "-A FORWARD -i {{ interface_in }} -o {{ interface_out }} -j ACCEPT"
  when: allow_connection
  notify: restart networking

- name: Backup the NAT configuration
  command: sh -c "iptables-save > /etc/iptables.ipv4.nat"
  when: allow_connection
